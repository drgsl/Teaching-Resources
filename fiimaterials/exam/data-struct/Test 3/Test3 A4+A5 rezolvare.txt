Rezolvate de cei din A6:


A4:
struct nod{
    elt inf;
    nod *st, *dr;
}
procedure SRD(nod *p, elt v[], int &k)
{
    if p == NULL then
        return
    SRD(p->st, v, k)
    v[k] <- p->inf
    k <- k + 1
    SRD(p->dr, v, k)
}
function gaseste(nod *t, elt k)
{
    n <- 0
    elt v[]
    SRD(t, v, n)
    i <- 0
    j <- n - 1
    while i < j do
        if v[i] + v[j] = k then
            print(v[i])
            print(v[j])
            return 1
        else if v[i] + v[j] < k then
            i <- i + 1
        else 
            j <- j - 1
            
    return -1
}


/*
    Punem primele k elemente intr-un max heap
    pentru elementele de la i = k, n-1:
        daca v[i] este mai mic decat H[0](radacina) atunci H[0] = v[i] + percolateDown(refacem heap ul)
    la final rezultatul va fi in H[0]
*/
percolateDown(H, i, k)
{
    if i >= k then
        return
    j <- i * 2 + 1
    if j >= k then
        return
    if j + 1 < k and H[j] < H[j + 1] then
        j <- j + 1
    if H[i] < H[j] then
        swap(H[i], H[j])
        percolateDown(H,j,k)
}
Insereaza(H, x,i)
{
    heap = 0
    H[i] = x
    while i > 0 and heap = 0 do
        j <- (i - 1) / 2
        if H[i] > H[j] then
            swap(H[i], H[j])
            i <- j
        else 
            heap <- 1
}
function kmin(elt v[], int k)
{
    for i <- 0 to k - 1 do
        Insereaza(H,v[i],i)
    
    for i <- k to n - 1 do
        if v[i] < H[0] then
            H[0] = v[i]
            percolateDown(H, 0, k)
    return H[0]
}









A5:
/*
    Punem primele k elemente intr-un min heap
    pentru elementele de la i = k, n-1:
        daca v[i] este mai mare decat H[0](radacina) atunci H[0] = v[i] + percolateDown(refacem heap ul)
    la final extragem toate elementele din heap
*/
percolateDown(H, i, k)
{
    if i >= k then
        return
    j <- i * 2 + 1
    if j >= k then
        return
    if j + 1 < k and H[j] > H[j + 1] then
        j <- j + 1
    if H[i] > H[j] then
        swap(H[i], H[j])
        percolateDown(H, j, k)
}
Insereaza(H, x, i)
{
    heap = 0
    H[i] = x
    while i > 0 and heap = 0 do
        j <- (i - 1) / 2
        if H[i] < H[j] then
            swap(H[i], H[j])
            i <- j
        else 
            heap <- 1
}
procedure kmax(elt v[], int k)
{
    for i <- 0 to k - 1 do
        Insereaza(H,v[i],i)

    for i <- k to n - 1 do
        if v[i] > H[0] then
            H[0] = v[i]
            percolateDown(H, 0, k)
    len <- k
    for i <- 0 to k - 1 do 
        print H[0]
        swap(H[0], H[len - 1])
        len <- len - 1
        percolateDown(H, 0, len)

}
vector cu n + m elemente
primele n elemente sortate
ultimele m nu sunt sortate
Metoda de sortare + precizam cazul  nefavorbil

1) m = O(1) 
    Facem un bubble sort si dupa o interclasare
    Cazul cel mai nefavorabil O( (n + m) + m ^ 2 ) ~ O(n)

2) m = O(logn) 
    Facem aceeasi metoda  si dupa interclasare 
    Cazul cel mai nefavorabil O( (n + m) + (logn) ^ 2 ) ~ O(n)

function cauta(nod *rad, l, r) 
begin
    if (rad -> inf >= l and rad -> inf <= r) then
        return rad 
    if (r < rad -> inf) 
        return cauta(rad -> st, l, r) 
    if (l > rad -> inf) 
        return cauta(rad -> dr, l, r) 
end 
function stramos(nod *rad, nod *a, nod *b) 
begin
    l <- a -> inf
    r <- b -> inf
    if l > r then 
        swap(l, r)
    nod *stramos <- cauta(rad, l, r)
    return stramos
end